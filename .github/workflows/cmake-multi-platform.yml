# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Windows Build
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Cache Vulkan SDK
      id: cache-vulkan
      uses: actions/cache@v4
      with:
        path: C:\VulkanSDK
        key: vulkan-sdk-1.4.313.0-windows
        
    - name: Install Vulkan SDK
      if: steps.cache-vulkan.outputs.cache-hit != 'true'
      run: |
        $ProgressPreference = 'SilentlyContinue'
        # Install Vulkan SDK with silent installation
        Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/1.4.313.0/windows/vulkansdk-windows-X64-1.4.313.0.exe" -OutFile VulkanSDK-Installer.exe
        .\VulkanSDK-Installer.exe /S
        Start-Sleep -Seconds 60
        
        # Manually install VMA (Vulkan Memory Allocator)
        Write-Host "Installing Vulkan Memory Allocator..."
        New-Item -ItemType Directory -Force -Path "C:\VulkanSDK\1.4.313.0\Include"
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator/master/include/vk_mem_alloc.h" -OutFile "C:\VulkanSDK\1.4.313.0\Include\vk_mem_alloc.h"
        
        # Install Volk (Vulkan meta-loader)
        Write-Host "Installing Volk..."
        New-Item -ItemType Directory -Force -Path "C:\VulkanSDK\1.4.313.0\Include\volk"
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/zeux/volk/master/volk.h" -OutFile "C:\VulkanSDK\1.4.313.0\Include\volk\volk.h"
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/zeux/volk/master/volk.c" -OutFile "C:\VulkanSDK\1.4.313.0\Include\volk\volk.c"
        
        # Install SPIRV-Cross headers if needed
        Write-Host "Installing SPIRV-Cross headers..."
        New-Item -ItemType Directory -Force -Path "C:\VulkanSDK\1.4.313.0\Include\spirv_cross"
        try {
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/KhronosGroup/SPIRV-Cross/main/spirv_cross.hpp" -OutFile "C:\VulkanSDK\1.4.313.0\Include\spirv_cross\spirv_cross.hpp"
        } catch {
          Write-Host "SPIRV-Cross headers not needed or already available"
        }
        
        # Verify installation
        Write-Host "Verifying Vulkan SDK installation..."
        if (Test-Path "C:\VulkanSDK\1.4.313.0\Include\vulkan\vulkan.h") {
          Write-Host "✓ Vulkan headers found"
        } else {
          Write-Host "✗ Vulkan headers missing"
        }
        
        if (Test-Path "C:\VulkanSDK\1.4.313.0\Include\vk_mem_alloc.h") {
          Write-Host "✓ VMA header found"
        } else {
          Write-Host "✗ VMA header missing"
        }
        
        if (Test-Path "C:\VulkanSDK\1.4.313.0\Include\volk\volk.h") {
          Write-Host "✓ Volk header found"
        } else {
          Write-Host "✗ Volk header missing"
        }
        
        # List what's actually installed
        Write-Host "Vulkan SDK contents:"
        Get-ChildItem "C:\VulkanSDK\1.4.313.0" -Recurse -Name | Select-Object -First 20
        
    - name: Set Vulkan Environment Variables
      run: |
        echo "VULKAN_SDK=C:\VulkanSDK\1.4.313.0" >> $env:GITHUB_ENV
        echo "C:\VulkanSDK\1.4.313.0\Bin" >> $env:GITHUB_PATH
        
    - name: Cache Qt 6.9.0
      id: cache-qt
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/Qt
        key: qt-6.9.0-windows-msvc2022-x64
        
    - name: Install Qt 6.9.0
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.9.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        dir: '${{ github.workspace }}/Qt'
        install-deps: 'true'
        modules: 'qtwebengine qtwebchannel qtpositioning'
        cache: 'true'
        
    - name: Setup Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        # ninja version to download. Default: 1.10.0
        version: 1.11.1
        
    # Use the newer setup-msbuild action that properly initializes the MSVC environment
    - name: Setup MSVC
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Configure CMake
      run: >
        cmake -B cmake-build
        -G Ninja
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }}
        -S ${{ github.workspace }}
        
    - name: Build
      run: cmake --build cmake-build --parallel
      
    - name: Test
      working-directory: cmake-build
      run: ctest --output-on-failure --parallel
      
    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          cmake-build/**/*.exe
          cmake-build/**/*.dll
          cmake-build/**/*.lib
        retention-days: 7
